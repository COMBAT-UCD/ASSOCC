globals [
  solo-transport-costs
  public-transport-costs
  car-sharing-costs
]


;;Satisfaction undiscounted expected functions

to-report SUE-financial-safety [mt]
  if mt = "solo" [
    report (- (solo-transport-costs / my-previous-amount-of-capital))
  ]
  if mt = "public" [
    report (- (public-transport-costs / my-previous-amount-of-capital))
  ]
  if mt = "shared-car" [
    report (- (car-sharing-costs / my-previous-amount-of-capital))
  ] 
end

to-report SUE-financial-survival [mt]
  if mt = "solo" [
      report (- min (list ((my-amount-of-capital - solo-transport-costs) / solo-transport-costs) 1))
  ]
  if mt = "public" [
      report (- min (list ((my-amount-of-capital - public-transport-costs) / public-transport-costs) 1))
  ]
  if mt = "shared-car" [
      report (- min (list ((my-amount-of-capital - car-sharing-costs) / car-sharing-costs) 1))
  ]  
end

to-report SUE-conformity [mt]
  if length what-my-network-did >= 28 [
    if mt = first what-transport-my-network-used [report 0.4]
    report 0
  ]
  report 1
end

to-report SUE-risk-avoidance [mt]
  let result 0.1
  if mt = "solo" [set result 0.2]
  if mt = "public" [
      if #max-people-per-bus = 0 [set result 0.2 ]
      if #max-people-per-bus < 5 [set result 0.1 ]
      if #max-people-per-bus < 10 [set result 0.05 ]
      ifelse #max-people-per-bus < 20 [set result 0]
      [set result -0.1]
  ]
  if mt = "shared-car" [set result 0.1]

  ;ifelse social-distancing-of ad
  ;  [ set result result + 0.1 ]
  ;  [ set result result - 0.1 ]

  report result
end

;;Satisfaction discounted expected functions

to-report SDE-financial-safety [mt]
  let expected-increase SUE-financial-safety mt
  let discounted-increase expected-increase * (1 - financial-safety-satisfaction-level)
  report discounted-increase
end

to-report SDE-financial-survival [mt]
  let expected-increase SUE-financial-survival mt
  let discounted-increase expected-increase * (1 - financial-survival-satisfaction-level)
  report discounted-increase
end

to-report SDE-conformity [mt]
  let expected-increase SUE-conformity mt
  let discounted-increase expected-increase * (1 - conformity-satisfaction-level)
  report discounted-increase
end

to-report SDE-risk-avoidance [mt]
  let expected-increase SUE-risk-avoidance mt
  let discounted-increase expected-increase * (1 - risk-avoidance-satisfaction-level)
  report discounted-increase
end

;;Satisfaction  actual functions
to-report SDA-financial-safety [mt]
  report SDE-financial-safety mt
end

to-report SDA-financial-survival [mt]
  report SDE-financial-survival mt
end


to-report SUA-conformity [mt]
  if length what-my-network-did >= 28 [
    if mt = last what-transport-my-network-used [report 0.4]
    report 0
  ]
  report 1
end

to-report  SDA-conformity [ad]
  let expected-increase SUA-conformity ad
  let discounted-increase expected-increase * (1 - conformity-satisfaction-level)
  report discounted-increase
end

;to be updated based on the SDA function for actions
to-report SDA-risk-avoidance [mt]
  report SDE-risk-avoidance mt
end


;;Habit
to-report add-occurance [occ occ-list]
  let index 0
  foreach occ-list [occ-count -> 
    if occ = item 0 occ-count [
      report replace-item index occ-list (list (item 0 occ-count) (item 1 occ-count + 1))
    ]
    set index index + 1
  ]
  report lput (list occ 1) occ-list
end

to-report determine-my-preferred-means-of-transport [what-transport-I-used]
  set what-transport-I-used remove "stay-here" what-transport-I-used
  let counts-of-my-means-of-transport []
  foreach what-transport-I-used [mt ->
    set counts-of-my-means-of-transport add-occurance mt counts-of-my-means-of-transport
  ]
  let my-preferred-means-of-transport (item 0 (reduce [ [x y] -> ifelse-value item 1 x > item 1 y [x] [y] ] counts-of-my-means-of-transport))
  report my-preferred-means-of-transport
end

to-report report-habit-satisfaction [mt]
  let my-preferred-means-of-transport determine-my-preferred-means-of-transport what-transport-I-used
  if my-preferred-means-of-transport = mt [
    report 1
  ]
  report 0
end



;;Prevalence calculation
to-report expected-global-prevalence-of [mt]
  ;reset-timer
  let total-satisfaction 0
  ;if cultural model is activated then:
  ;calculate the total-satisfaction an agent expects to gain from a means of transport as the weighted sum of all its needs
  set total-satisfaction sum (list
    ;Needs
    (SDE-financial-safety mt * importance-weight-financial-safety) 
    (SDE-financial-survival mt * importance-weight-financial-survival)
    (SDE-conformity mt * importance-weight-conformity)
    (SDE-risk-avoidance mt * importance-weight-risk-avoidance)
    
    ;Further factors
    (report-habit-satisfaction mt)
    
    ;Calibration probability
    (my-probability-of-taking mt)
  )
end
