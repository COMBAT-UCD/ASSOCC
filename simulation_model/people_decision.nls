__includes ["need_management.nls" "cultural_model.nls"]

;reports a string, which can be related to a gathering point and a concrete activity
to-report my-preferred-available-activity-descriptor 
  debug-file-print (sentence "Person " who " " age)
  report item 0 reduce [[x y] -> ifelse-value item 1 x > item 1 y [x] [y]] (map [x -> (list x (global-prevalence-of x))] my-available-activity-descriptors)
  ;report reduce [[x y] -> ifelse-value global-prevalence-of x > global-prevalence-of y [x] [y]] my-available-activity-descriptors
end

to-report is-away?
  report current-activity = away-gathering-point
end


to-report travelling-reason
  report travelling-motive
end

;;here one should also include caring for children.
;;Now it's highjacking the decision process
to-report my-available-activity-descriptors
  if migration? and is-away?
  [
    if (not (random-float 1 < probability-getting-back-when-abroad)) [
      report (list (list away-gathering-point travelling-reason "shared car" false))
    ]
  ]


  set activities (list (list my-home "rest" "none" ))

  if has-internally-visible-symptoms? or is-believing-to-be-infected? [
    put-my-activities-in-activity-list my-hospital treatment-motive ]

  if (slice-of-the-day = "morning" or slice-of-the-day = "afternoon") and working-day?
    [
      if is-child? [
        put-my-activities-in-activity-list my-school  "mandatory"
          ]
      if is-student?
      [
        put-my-activities-in-activity-list my-university  "learning"
      ]

      if is-worker? [
        if is-allowed-to-work-from-home? and I-know-of-working-from-home? [
          put-my-activities-in-activity-list my-home work-motive  ]
        
        put-my-activities-in-activity-list my-work work-motive
      ]
  ]
  
  if slice-of-the-day = "evening" or not working-day? or age = "retired"
  [
    if age != "young" and slice-of-the-day != "night" [
      put-my-activities-in-activity-list my-essential-shop "essential shopping"
      put-my-activities-in-activity-list my-non-essential-shop "shopping" 
    ]

    put-my-activities-in-activity-list my-public-leisure "relaxing" 
    put-my-activities-in-activity-list my-private-leisure "relaxing" 

  ]

  put-my-activities-in-activity-list my-hospital "get-tested" 
  set activities filter [ i -> [is-accessible?] of first i] activities

  ;show [gathering-type] of (turtle-set map [ad -> first ad] activities)


  if any? people-that-depend-on-me with [ (current-person-I-depend-on = nobody or current-person-I-depend-on = myself)
    and is-currently-in-sitation-of-active-dependence?]
  [

    ask people-that-depend-on-me [ set current-person-I-depend-on myself]
    set activities filter [ i -> can-be-done-with-a-dependable-person? i] activities
  ]
  let ret []
  foreach activities [ activity ->
    set ret fput (lput false activity) ret
    if I-know-of-social-distancing? [
      set ret fput (lput true activity) ret
    ]
  ]
  report ret
end

to put-my-activities-in-activity-list [gp mo]
  let t 0
  let ltm length-of-list-transport-method gp
  while [ t < ltm ] [
   set activities lput (activity-descriptor gp mo transport-method gp t) activities
    set t t + 1]
    
end



to-report is-currently-in-sitation-of-active-dependence?
  report is-child? and closed-schools?
end



to select-activity
  let c-a my-preferred-available-activity-descriptor
  
  ;;select if migration takes over and people move around
  if (migration? and random-float 1 < probability-going-abroad) [
    set c-a (list away-gathering-point travelling-motive "shared car" false)
  ]
  
  let loc location-of c-a
  select-activity-wtf? loc
  set current-activity loc
  set current-motivation motive-of c-a
  set current-transport-method transport-method-of c-a
  set is-I-apply-social-distancing? social-distancing-of c-a
  if current-activity != away-gathering-point and current-motivation = travelling-motive [error "wrong place while travelling"]
end

;;this function is the main bottleneck of the whole application!
;;it draws 0.2ms per call 
to select-activity-wtf? [loc]
  
 ; set is-moving-outside-for-reaching-current-activity? not (current-activity = location-of c-a)
  set is-moving-outside-for-reaching-current-activity? not (current-activity = loc)
end




to-report is-allowed-to-work-from-home?
  if not is-worker? [error "not a worker"]
  report member? [gathering-type] of my-work ["workplace" "university"]
  ;link-neighbors with [gathering-type = "workplace"]
end

to-report is-currently-watching-a-child?
  report any? [current-gatherers with [is-child?]] of current-activity
end

to-report is-currently-watched-by-an-adult?
  report any? [current-gatherers with [is-adult?]] of current-activity
end

to update-belief-based-on-current-activity
  let family-here count my-relatives with [current-activity = [current-activity] of myself]
  if any? my-relatives and family-here / count my-relatives > 0.5 [ set days-since-seen-relatives 0 ]
  
  if is-worker? 
  [
    let colleagues-here count my-colleagues with [current-activity = [current-activity] of myself]
    if (any? other my-colleagues and colleagues-here / count my-colleagues > 0.5) [ set days-since-seen-colleagues 0 ]
    if any? other my-colleagues with [I-know-of-working-from-home?] [ set I-know-of-working-from-home? true ]
  ]
  let friends-here count my-friends with [current-activity = [current-activity] of myself]
  if any? my-friends and friends-here / count my-friends > 0.5 [ set days-since-seen-friends 0 ]
  if any? other my-network with [I-know-of-social-distancing?] [ set I-know-of-social-distancing? true ]
  
  update-memory
end

to update-memory
  let network-activities new-counter
  ask my-network [
    set network-activities add-to-counter network-activities (list current-motivation current-transport-method is-I-apply-social-distancing?)
  ]
  ; add a nobody to the front of the list to make it work like an activity
  ; to do: switch to gathering point type?
  let network-activity fput nobody counter-max-value network-activities
  set what-my-network-did lput network-activity what-my-network-did
  if length what-my-network-did > 28 [
    set what-my-network-did but-first what-my-network-did
  ]
end
