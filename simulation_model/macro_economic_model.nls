globals [central-bank-reserve-of-capital]

breed [macro-sectors macro-sector]

macro-sectors-own
[
  sector-type
  amount-of-capital
]

directed-link-breed [macro-sector-links macro-sector-link]
macro-sector-links-own
[
  priority
  drain ;capital to pay
  amount-of-capital-in-the-reserve
]

to run-macro-economics
  ask macro-sectors
  [
    ;ensure that reserves have a minimum amount of capital
    ask my-out-macro-sector-links
    [
      let min-amount-of-capital drain - amount-of-capital-in-the-reserve
      if min-amount-of-capital > 0
      [
        ;the 'perform-transaction' procedure can't be used in the context of a link
        ask myself [ set amount-of-capital amount-of-capital - min-amount-of-capital ]
        set amount-of-capital-in-the-reserve amount-of-capital-in-the-reserve + min-amount-of-capital
        ;perform-transaction myself self (list "nothing") (list "trade" amount-of-capital-to-receive)
      ]
    ]
    
    ;check reserves
    let amount-of-capital-to-fill-all-reserves 0
    ask my-out-macro-sector-links
    [
      let threshold (10 - priority) * drain
      let amount-of-capital-to-fill-reserve (threshold - amount-of-capital-in-the-reserve)
      set amount-of-capital-to-fill-all-reserves amount-of-capital-to-fill-all-reserves + amount-of-capital-to-fill-reserve
    ]
    
    ;fill reserves
    let available-amount-of-capital max (list amount-of-capital 0)
    let amount-of-capital-to-go-to-reserves min (list available-amount-of-capital amount-of-capital-to-fill-all-reserves)
    let remaining-capital-to-go-to-reserves amount-of-capital-to-go-to-reserves ;control variable
    if amount-of-capital-to-go-to-reserves > 0
    [
      ask my-out-macro-sector-links
      [
        let threshold (10 - priority) * drain
        let amount-of-capital-to-fill-reserve (threshold - amount-of-capital-in-the-reserve)
        let amount-of-capital-to-receive (amount-of-capital-to-fill-reserve / amount-of-capital-to-fill-all-reserves) * amount-of-capital-to-go-to-reserves
        set amount-of-capital-to-receive min (list amount-of-capital-to-receive remaining-capital-to-go-to-reserves)
        set remaining-capital-to-go-to-reserves remaining-capital-to-go-to-reserves - amount-of-capital-to-receive
        
        ;the 'perform-transaction' procedure can't be used in the context of a link
        ask myself [ set amount-of-capital amount-of-capital - amount-of-capital-to-receive ]
        set amount-of-capital-in-the-reserve amount-of-capital-in-the-reserve + amount-of-capital-to-receive
        ;perform-transaction myself self (list "nothing") (list "trade" amount-of-capital-to-receive)
      ]
    ]
    
    ;transfer capital to other sectors
    ask my-out-macro-sector-links
    [
      ifelse [is-services-luxury?] of other-end and close-services-luxury?
      []
      [
        let amount-of-capital-to-transfer min (list drain amount-of-capital-in-the-reserve)
        
        ;the 'perform-transaction' procedure can't be used in the context of a link
        set amount-of-capital-in-the-reserve amount-of-capital-in-the-reserve - amount-of-capital-to-transfer
        ask other-end [ set amount-of-capital amount-of-capital + amount-of-capital-to-transfer ]
        ;perform-transaction self other-end (list "nothing") (list "trade" amount-of-capital-to-transfer)
      ]
    ]
    
;    foreach sort-on [priority] my-out-macro-sector-links 
;    [
;      the-link -> ask the-link [
;        if [amount-of-capital] of myself >= drain
;        [
;          perform-transaction myself other-end (list "nothing") (list "trade" drain)
;        ]
;      ]
;    ]
  ]
end

to-report is-agriculture-essential?
  report sector-type = "agriculture-essential"
end

to-report is-agriculture-luxury?
  report sector-type = "agriculture-luxury"
end

to-report is-manufacturing-essential?
  report sector-type = "manufacturing-essential"
end

to-report is-manufacturing-luxury?
  report sector-type = "manufacturing-luxury"
end

to-report is-services-essential?
  report sector-type = "services-essential"
end

to-report is-services-luxury?
  report sector-type = "services-luxury"
end

to-report is-education-research?
  report sector-type = "education-research"
end

to-report is-households-sector?
  report sector-type = "households"
end

to-report is-government-sector?
  report sector-type = "government"
end

to-report is-international-sector?
  report sector-type = "international"
end

to-report total-capital-agriculture-essential
  report sum [amount-of-capital] of macro-sectors with [is-agriculture-essential?]
end

to-report total-capital-agriculture-luxury
  report sum [amount-of-capital] of macro-sectors with [is-agriculture-luxury?]
end

to-report total-capital-manufacturing-essential
  report sum [amount-of-capital] of macro-sectors with [is-manufacturing-essential?]
end

to-report total-capital-manufacturing-luxury
  report sum [amount-of-capital] of macro-sectors with [is-manufacturing-luxury?]
end

to-report total-capital-services-essential
  report sum [amount-of-capital] of macro-sectors with [is-services-essential?]
end

to-report total-capital-services-luxury
  report sum [amount-of-capital] of macro-sectors with [is-services-luxury?]
end

to-report total-capital-education-research
  report sum [amount-of-capital] of macro-sectors with [is-education-research?]
end

to-report total-capital-households-sector
  report sum [amount-of-capital] of macro-sectors with [is-households-sector?]
end

to-report total-capital-government-sector
  report sum [amount-of-capital] of macro-sectors with [is-government-sector?]
end

to-report total-capital-international-sector
  report sum [amount-of-capital] of macro-sectors with [is-international-sector?]
end
