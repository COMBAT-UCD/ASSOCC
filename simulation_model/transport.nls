globals [
  is-busses-overrun? 
  #denied-attempts-due-to-bus-overload
  list-of-buses
  list-of-shared-cars
  #people-denied-bus
]
to travelling-to-activity-phase
  set is-busses-overrun? false
  
  move-on-display

  
  ask people [set stayed-out-queuing-for-bus? false ]
  
  let bus-users (turtle-set)
  let shared-car-users (turtle-set)
  
  ask people [
    if not is-moving-outside-for-reaching-current-activity? [set my-means-of-transportation-I-currently-use stay-here-transportation-method stop]
    if my-means-of-transportation-I-currently-use = public-transportation-method [set bus-users (turtle-set bus-users self)]
    if my-means-of-transportation-I-currently-use = shared-car-transportation-method [set shared-car-users (turtle-set shared-car-users self)]
  ]
  
  set list-of-buses n-values #bus-per-timeslot [x -> (turtle-set)]
  let #users-in-buses 0
  
  ask bus-users [
    if #users-in-buses >= max-total-bus-flow-at-current-timestep - 1 [
      set #people-denied-bus #people-denied-bus + 1 
      set stayed-out-queuing-for-bus? true stop]
    let random-item random length list-of-buses
    if count item random-item list-of-buses = #max-people-per-bus [set stayed-out-queuing-for-bus? true]
    
    while[count (item random-item list-of-buses) = #max-people-per-bus]
    [set random-item (random-item + 1) mod length list-of-buses]
    
    set list-of-buses replace-item random-item list-of-buses (turtle-set self (item random-item list-of-buses))
    set #users-in-buses #users-in-buses + 1
  ] 
  
  set list-of-shared-cars (list)
  let ongoing-set (turtle-set)
  ask shared-car-users [
    if count ongoing-set = 5 [
      set list-of-shared-cars lput ongoing-set list-of-shared-cars
      set ongoing-set (turtle-set)
    ]
    set ongoing-set (turtle-set self ongoing-set)
  ]
  if any? ongoing-set [set  list-of-shared-cars lput ongoing-set list-of-shared-cars]
  
  
end

to-report max-total-bus-flow-at-current-timestep
  report #bus-per-timeslot * #max-people-per-bus
end

to-report stay-here-transportation-method
  report "stay-here"
end

to-report solo-transportation-method
  report "solo"
end

to-report public-transportation-method
  report "public"
end

to-report shared-car-transportation-method
  report "shared-car"
end


to-report setup-do-I-own-a-car?
  
  if is-child? [
    ifelse ratio-children-own-cars > random 1
    [report true ]
    [report false]
  ]
  if is-retired? [
    ifelse ratio-retired-own-cars > random 1 
      [report true ]
    [report false]
  ]
  if is-student?  [
    ifelse ratio-students-own-cars > random 1 
      [report true ]
    [report false]
  ]
  if is-worker? [
    ifelse ratio-workers-own-cars > random 1 
      [report true ]
    [report false]
  ]  
end

to setup-prefered-type-of-transport-method-to-gathering-points
  
  ifelse ratio-motorized-transport-to-school > random 1 
  [set transport-to-my-school "motorized"]
  [set transport-to-my-school "non-motorized"]
  ifelse ratio-motorized-transport-to-university > random 1 
  [set transport-to-my-university "motorized"]
  [set transport-to-my-university "non-motorized"]
  ifelse ratio-motorized-transport-to-work > random 1 
  [set transport-to-my-work "motorized"]
  [set transport-to-my-work "non-motorized"]
  ifelse ratio-motorized-transport-to-hospital > random 1 
  [set transport-to-my-hospital "motorized"]
  [set transport-to-my-hospital "non-motorized"]
  ifelse ratio-motorized-transport-to-my-non-essential-shop > random 1 
  [set transport-to-my-non-essential-shop "motorized"]
  [set transport-to-my-non-essential-shop "non-motorized"]
  ifelse ratio-motorized-transport-to-essential-shops > random 1 
  [set transport-to-my-essential-shops "motorized"]
  [set transport-to-my-essential-shops "non-motorized"]
  ifelse ratio-motorized-transport-to-public-leisure > random 1 
  [set transport-to-my-public-leisure "motorized"]
  [set transport-to-my-public-leisure "non-motorized"]
  ifelse ratio-motorized-transport-to-private-leisure > random 1 
  [set transport-to-my-private-leisure "motorized"]
  [set transport-to-my-private-leisure "non-motorized"]  
  set transport-to-my-home "none"

end

to-report preferred-type-of-transport-method-to-gathering-point [activity-location]
  
  if activity-location = my-school
  [report transport-to-my-school ]
  
  if activity-location = my-university
  [report transport-to-my-university ]
  
  if activity-location = my-work
  [report transport-to-my-work ]
  
  if activity-location = my-hospital
  [report transport-to-my-hospital ]
  
  if activity-location = my-non-essential-shop
  [report transport-to-my-non-essential-shop ]
  
  if activity-location = my-essential-shop
  [report transport-to-my-essential-shops]
  
  if activity-location = my-public-leisure
  [report transport-to-my-public-leisure ]
  
  if activity-location = my-private-leisure
  [report transport-to-my-private-leisure ]
  
  if activity-location = my-home 
  [report transport-to-my-home ]
  
  show activity-location
  
  
end

to-report length-of-list-transport-method [activity-location]
  let trans []
  if activity-location = my-home [ set trans (list "none")]
  if activity-location = current-activity [ set trans (list "none")]
  ifelse preferred-type-of-transport-method-to-gathering-point activity-location = "non-motorized"
  [set trans (list "solo-transport")]
  [ifelse do-I-own-a-car? = true 
    [set trans (list "car" "bus" "shared-car")]
    [set trans (list "bus" "shared-car")]
  ]
  report length trans
end

to-report transport-method [activity-location item-in-list ] 
   let trans []
  if activity-location = my-home [ set trans (list "none")]
  if activity-location = current-activity [ set trans (list "none")]
  ifelse preferred-type-of-transport-method-to-gathering-point activity-location = "non-motorized"
  [set trans (list "solo-transport")]
  [ifelse do-I-own-a-car? = true 
    [set trans (list "car" "bus" "shared-car")]
    [set trans (list "bus" "shared-car")]
  ]
  report item item-in-list trans
  
end


to move-on-display 
  ask people
  [
    if not animate? [
      move-to one-of [patches in-radius 3  with [pxcor > [pxcor] of myself]] of current-activity
      set heading towards current-activity
    ]
  ]
end