__includes ["transport_decision.nls"]

globals [is-busses-overrun?
  #denied-attempts-due-to-bus-overload
  list-of-buses
  list-of-shared-cars
  #people-denied-bus
  #bus-per-timeslot
  #users-in-buses
  #users-in-shared-cars
  #users-solo
  #workers-public-transport
  #workers-solo-transport
]
to travelling-to-activity-phase
  set is-busses-overrun? false
  set #bus-per-timeslot #public-transport-workers
  
  move-on-display

  
  ask people [set stayed-out-queuing-for-bus? false ]
  
  let bus-users (turtle-set)
  let shared-car-users (turtle-set)
  
  ask people [
    if not is-moving-outside-for-reaching-current-activity? [set my-means-of-transportation-I-currently-use stay-here-transportation-method stop]
    set my-means-of-transportation-I-currently-use determine-means-of-transport
    if my-means-of-transportation-I-currently-use = public-transportation-method [
      set bus-users (turtle-set bus-users self)
    ]
    if my-means-of-transportation-I-currently-use = shared-car-transportation-method [
      set shared-car-users (turtle-set shared-car-users self)
    ]
  ]
  
  set list-of-buses n-values #bus-per-timeslot [x -> (turtle-set)]
  set #users-in-buses 0
  
  ask bus-users [
    if #users-in-buses = max-total-bus-flow-at-current-timestep [
      set #people-denied-bus #people-denied-bus + 1 
      set stayed-out-queuing-for-bus? true stop]
    let random-item random length list-of-buses
    if count item random-item list-of-buses = #max-people-per-bus [set stayed-out-queuing-for-bus? true]
    
    while[count (item random-item list-of-buses) = #max-people-per-bus]
    [set random-item (random-item + 1) mod length list-of-buses]
    
    set list-of-buses replace-item random-item list-of-buses (turtle-set self (item random-item list-of-buses))
    set my-transport-number random-item
    set #users-in-buses #users-in-buses + 1
  ] 
  
  set list-of-shared-cars (list)
  let ongoing-set (turtle-set)
  ask shared-car-users [
    ;currently amount people per car is 5, if changed also change SUE-risk-avoidance-transport!
    if count ongoing-set = 5 [
      set list-of-shared-cars lput ongoing-set list-of-shared-cars
      set ongoing-set (turtle-set)
    ]
    set ongoing-set (turtle-set self ongoing-set)
    set my-transport-number (length list-of-shared-cars)
    set #users-in-shared-cars #users-in-shared-cars + 1
  ]
  if any? ongoing-set [set  list-of-shared-cars lput ongoing-set list-of-shared-cars]
  
  
  set #users-solo count people with [my-means-of-transportation-I-currently-use = solo-transportation-method]
  
  set #workers-public-transport count people with [my-means-of-transportation-I-currently-use = public-transportation-method and age = worker-age]
  set #workers-solo-transport count people with [my-means-of-transportation-I-currently-use = solo-transportation-method and age = worker-age]
  
end

to-report max-total-bus-flow-at-current-timestep
  report #bus-per-timeslot * #max-people-per-bus
end

to-report stay-here-transportation-method
  report "stay-here"
end



to-report random-means-of-transportation
  let rand random-float 1
  let my-probability-of-taking-the-bus my-probability-of-taking "public"
  let my-probability-of-taking-a-shared-car my-probability-of-taking "shared-car"
  if rand < my-probability-of-taking-the-bus [report public-transportation-method]
  set rand rand - my-probability-of-taking-the-bus
  if rand < my-probability-of-taking-a-shared-car [report shared-car-transportation-method]
  if not can-I-perform-solo-transportation? [report random-means-of-transportation]
  report solo-transportation-method
end

to-report solo-transportation-method
  report "solo"
end

to-report public-transportation-method
  report "public"
end

to-report shared-car-transportation-method
  report "shared-car"
end

to-report my-probability-of-taking [mt]
  if mt = "public" [
    if is-child? [report ratio-children-public-transport]
    if is-retired? [report ratio-retired-public-transport]
    if is-student? [report ratio-student-public-transport]
    if is-worker? [report ratio-worker-public-transport]
  ]
  if mt = "shared-car" [
    if is-child? [report ratio-children-shared-car]
    if is-retired? [report ratio-student-shared-car]
    if is-student? [report ratio-student-shared-car]
    if is-worker? [report ratio-worker-shared-car]
  ]
  if mt = "solo" [
     if is-child? [report ((1 - ratio-children-shared-car) - ratio-children-public-transport)]
    if is-retired? [report ((1 - ratio-student-shared-car) - ratio-retired-public-transport)]
    if is-student? [report ((1 - ratio-student-shared-car) - ratio-student-public-transport)]
    if is-worker? [report ((1 - ratio-worker-shared-car) - ratio-worker-public-transport)]
  ]
end

to-report expected-number-of-others-on-transport [mt]
  let others 0 ;for solo/stay-here/stay-home
  if mt = "public" [set others #max-people-per-bus] 
  if mt = "shared-car" [set others 5]
  report others
end

to-report number-of-others-on-transport [mt]
  let others 0 ;for solo/stay-here/stay-home
  if mt = "public" [set others ((count (item my-transport-number list-of-buses)) - 1)] 
  if mt = "shared-car" [set others (count item my-transport-number list-of-shared-cars) - 1]
  report others
end

to-report setup-do-I-own-a-car?
  
  if is-child? [
    ifelse ratio-children-own-cars > random 1
    [report true ]
    [report false]
  ]
  if is-retired? [
    ifelse ratio-retired-own-cars > random 1 
      [report true ]
    [report false]
  ]
  if is-student?  [
    ifelse ratio-students-own-cars > random 1 
      [report true ]
    [report false]
  ]
  if is-worker? [
    ifelse ratio-workers-own-cars > random 1 
      [report true ]
    [report false]
  ]  
end

to setup-preferred-type-of-transport-method-to-gathering-points
  
  ifelse ratio-motorized-transport-to-school > random-float 1 
  [set transport-to-my-school "motorized"]
  [set transport-to-my-school "non-motorized"]
  ifelse ratio-motorized-transport-to-university > random-float 1 
  [set transport-to-my-university "motorized"]
  [set transport-to-my-university "non-motorized"]
  ifelse ratio-motorized-transport-to-work > random-float 1 
  [set transport-to-my-work "motorized"]
  [set transport-to-my-work "non-motorized"]
  ifelse ratio-motorized-transport-to-hospital > random-float 1 
  [set transport-to-my-hospital "motorized"]
  [set transport-to-my-hospital "non-motorized"]
  ifelse ratio-motorized-transport-to-my-non-essential-shop > random-float 1 
  [set transport-to-my-non-essential-shop "motorized"]
  [set transport-to-my-non-essential-shop "non-motorized"]
  ifelse ratio-motorized-transport-to-essential-shops > random-float 1 
  [set transport-to-my-essential-shops "motorized"]
  [set transport-to-my-essential-shops "non-motorized"]
  ifelse ratio-motorized-transport-to-public-leisure > random-float 1 
  [set transport-to-my-public-leisure "motorized"]
  [set transport-to-my-public-leisure "non-motorized"]
  ifelse ratio-motorized-transport-to-private-leisure > random-float 1 
  [set transport-to-my-private-leisure "motorized"]
  [set transport-to-my-private-leisure "non-motorized"]  
  set transport-to-my-home "none"

end

to-report preferred-type-of-transport-method-to-gathering-point [activity-location]
  
  if [gathering-type] of activity-location = "school"
  [report transport-to-my-school ]
  
  if [gathering-type] of activity-location = "university"
  [report transport-to-my-university ]
  
  if  [gathering-type] of activity-location = "workplace"
  [report transport-to-my-work ]
  
  if  [gathering-type] of activity-location = "hospital"
  [report transport-to-my-hospital ]
  
  if [gathering-type] of activity-location = "non-essential-shop"
  [report transport-to-my-non-essential-shop ]
  
  if  [gathering-type] of activity-location = "essential-shop"
  [report transport-to-my-essential-shops]
   
  if [gathering-type] of activity-location = "public-leisure"
  [report transport-to-my-public-leisure ]
  
  if [gathering-type] of activity-location = "private-leisure"
  [report transport-to-my-private-leisure ]
  
  if [gathering-type] of activity-location = "home"
  [report transport-to-my-home ]

  
end

to-report length-of-list-transport-method [activity-location]
  
  if activity-location = my-home [ report length (list "none")]
  if activity-location = current-activity [ report length (list "none")]
  ifelse preferred-type-of-transport-method-to-gathering-point activity-location = "non-motorized"
  [report length (list "solo-transport")]
  [ifelse do-I-own-a-car? = true 
    [report length (list "car" "bus" "shared-car")]
    [report length (list "bus" "shared-car")]
  ]
 
end

to-report transport-method [activity-location item-in-list ] 
   
  if activity-location = my-home or activity-location = current-activity [
    report item item-in-list (list "none")]
  ifelse preferred-type-of-transport-method-to-gathering-point activity-location = "non-motorized"
  [report item item-in-list (list "solo-transport")]
  [ifelse do-I-own-a-car? = true 
    [report item item-in-list (list "car" "bus" "shared-car")]
    [report item item-in-list (list "bus" "shared-car")]
  ]

  
end


to move-on-display 
  if not animate? [
    ask people
    [
      move-to one-of [patches in-radius 3  with [pxcor > [pxcor] of myself]] of current-activity
      set heading towards current-activity
    ]
  ]
end