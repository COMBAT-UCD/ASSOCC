globals [
  #people-infected-in-pubtrans
  #people-infected-in-shared-cars
  #people-infected-when-queuing
  #people-infected-in-activities
  #people-infected-in-general-travel
  first-infected-people
  #first-infected-people;;needed as infected people can die
  #infected-by-first-infected-people
  #infected-by-asymptomatic-people
]

directed-link-breed [contagion-links contagion-link]

to spread-contagion
  spread-by-travelling
  spread-by-activity-proximity
end

to spread-by-travelling
  let travellers people with [is-moving-outside-for-reaching-current-activity?]
  
  let contagious travellers with [is-contagious?]
  ask people [if is-away? [apply-risk-of-contamination-when-away]]
  
  ask travellers [
    apply-risk-of-contamination-when-travelling travellers contagious
  ]
  
  foreach list-of-buses [
    x -> spread-within-a-set-of-people x density-in-public-transport [ [] -> set #people-infected-in-pubtrans #people-infected-in-pubtrans + 1] "bus"
  ]
  
  foreach list-of-shared-cars [
    x -> spread-within-a-set-of-people x density-in-shared-cars [ [] -> set #people-infected-in-shared-cars #people-infected-in-shared-cars + 1] "cars"
  ]
  
  let people-waiting-for-bus people with [stayed-out-queuing-for-bus?]
  spread-within-a-set-of-people people-waiting-for-bus density-when-queuing 
  * (sqrt count people-waiting-for-bus / count people);;this last factor represents the relative density of people waiting for buses
                                                    ;; which further reduces the risk of getting sick when queuing
  [ [] -> set #people-infected-when-queuing #people-infected-when-queuing + 1]
  "queue-waiting-for-bus"
end

to spread-by-activity-proximity
  ask gathering-points with [not (self = away-gathering-point)]
  [
    spread-within-a-set-of-people current-gatherers proximity-factor [ [] -> set #people-infected-in-activities #people-infected-in-activities + 1] (word "gp" [who] of self)
  ]
end

to spread-within-a-set-of-people [ts prox-factor lambda-when-contagion context]
  
  ;;quite ugly solution. Contact points should be stored in different structures & processes
  update-contacts-of-a-set-of-people-in-contact-tracing-app-public-measure ts
  
  let susceptible-people ts with [is-susceptible?]
  let contagious-people-in-the-set  ts with [is-contagious?] 
  ask contagious-people-in-the-set [
    ask susceptible-people [
      apply-risk-of-contamination myself prox-factor * contextual-contagion-modificators lambda-when-contagion context]
  ]
end


to-report contextual-contagion-modificators
  report age-infection-risk-mitigation-factor * social-distancing-risk-mitigation-factor
end

to-report social-distancing-risk-mitigation-factor
  ifelse is-I-apply-social-distancing? [report probably-contagion-mitigation-from-social-distancing]
  [report 1]
end


;; this process is a bit shitty as it does some mathematical merging of probability
to apply-risk-of-contamination-when-travelling [travellers contagious]
  let #travellers count travellers
  let ratio-contagion sum [contagion-risk-factor] of contagious
  if not any? contagious [stop]
  if density-travelling-propagation = 0 [stop]
  if not is-moving-outside-for-reaching-current-activity? [stop]  
   
  let ratio-contagious ratio-contagion / count people;;this should be related to space
  
  ;;these are "intuitive maths", to be confirmed if relevant
  ;;the squared root represents the risk of two people picking the same item when each pick n items on a n*n space (x*x -> n * 1)
  ;;it could be cubic if the people we would consider a 3D space (or time)
  let number-encounters sqrt #travellers
  
  let probability-avoiding-all-contagious (1 - ratio-contagious) ^ number-encounters
  let probability-getting-sick 1 - probability-avoiding-all-contagious
  
 ; show (sentence count travellers with [is-contagious?] "/" ratio-contagious "#contacts" number-encounters "avoid all:" probability-avoiding-all-contagious "sick?" probability-getting-sick)
  
  ;;could be fastened with a bit of math, like 1-(1-p)^k
  let was-sick? is-infected?
  apply-risk-of-contamination one-of contagious probability-getting-sick * density-travelling-propagation * contextual-contagion-modificators [ [] -> set #people-infected-in-general-travel #people-infected-in-general-travel + 1]
  "travelling outside"
  if not was-sick? and is-infected? [set #who-became-sick-while-travelling-locally #who-became-sick-while-travelling-locally + 1]
end

to-report age-infection-risk-mitigation-factor
  report ifelse-value is-young? [factor-reduction-probability-transmission-young] [1]
end

to apply-risk-of-contamination-when-away
  if random-float 1 < probability-infection-when-abroad * contextual-contagion-modificators and infection-status = healthy-infection-status
  [
    contaminate nobody "away"
  ]
end

to apply-risk-of-contamination [infector factor lambda-when-contagion context]  
  if infector = nobody [error "assertion error"]
  let contagion-risks factor * propagation-risk * [contagion-risk-factor] of infector
 ; show (sentence ticks contagion-risks lambda-when-contagion)
  if  random-float 1 < contagion-risks and infection-status = healthy-infection-status
  [
    run lambda-when-contagion
     contaminate infector context
  ]
end

to-report contagion-risk-factor
  if infection-status = just-contaminated-infection-status or
  infection-status = immune-infection-status or
  infection-status = healthy-infection-status or
  infection-status = dead-infection-status
  [report 0]
  
  if infection-status = asymptomatic-to-rec-infection-status
  or infection-status = pre-symptomatic-to-mild-infection-status
  or infection-status = pre-symptomatic-to-severe-infection-status
  [report 0.29]
  
  if infection-status = symptomatic-mild-infection-status or
   infection-status = mild-to-rec-infection-status  
  [report 0.48]
  
  if  infection-status = symptomatic-severe-infection-status or
  infection-status = severe-to-hospital-infection-status or
  infection-status = severe-to-rec-infection-status or
  infection-status =  hospital-to-death-infection-status or
  infection-status = hospital-to-rec-infection-status
  [report 1]
  error (sentence "not implemented" infection-status)
end

;  
;infected-critical-infection-status  
;hospital-to-rec-infection-status dead-infection-status
 

to contaminate [infector context]
  if log? and log-contamination? [let infector-str "nobody"if infector != nobody [set infector-str [who] of infector] log-file-print (word "infection(" ticks "," who "," infector-str "," context ")")]
  
  if infector != nobody [
    if [is-asymptomatic?] of infector [set #infected-by-asymptomatic-people #infected-by-asymptomatic-people + 1]
    if any? first-infected-people with [self = infector] [set #infected-by-first-infected-people  #infected-by-first-infected-people + 1]
    if [not is-contagious?] of infector [error "assertion error"]
    ask infector [set number-of-people-I-infected number-of-people-I-infected + 1]
    create-contagion-link-from infector [hide-link]]
  set-contaminated-disease-status
end

to-report is-contagious?
  
  report not (infection-status = healthy-infection-status) and not (infection-status = "immune") and not (infection-status = dead-infection-status)
end

to-report is-alive?
  report not (infection-status = "dead")
end

to-report abc
  report r0
end

to-report r0
  report #infected-by-first-infected-people / #first-infected-people
end

to export-contagion-graph-to-graphviz
 export-to-graphviz [[] -> out-contagion-link-neighbors]
end