 
to perform-trades-between-gathering-points
  let transfer-amount-from-shops-to-workplaces 0

  ask gathering-points with [gathering-type = "essential-shop"]
  [
    if current-profit > 0
    [
      let amount-charged current-profit * ratio-amount-spent-by-essential-shops-on-supplies
      if workplace-amount-of-goods-in-stock >= (transfer-amount-from-shops-to-workplaces + amount-charged) / unit-price-of-goods
      [
        set transfer-amount-from-shops-to-workplaces transfer-amount-from-shops-to-workplaces + amount-charged
        set amount-of-capital amount-of-capital - amount-charged
        set current-profit current-profit - amount-charged
        set stock-of-goods stock-of-goods + amount-charged / unit-price-of-goods
      ]
    ]
  ]

  ask gathering-points with [gathering-type = "non-essential-shop"]
  [
    if current-profit > 0
    [
      let amount-charged current-profit * ratio-amount-spent-by-non-essential-shops-on-supplies
      if workplace-amount-of-goods-in-stock >= (transfer-amount-from-shops-to-workplaces + amount-charged) / unit-price-of-goods
      [
        set transfer-amount-from-shops-to-workplaces transfer-amount-from-shops-to-workplaces + amount-charged
        set amount-of-capital amount-of-capital - amount-charged
        set current-profit current-profit - amount-charged
        set stock-of-goods stock-of-goods + amount-charged / unit-price-of-goods
      ]
    ]
  ]

  let n-of-workplaces count gathering-points with [gathering-type = "workplace"]
  ask gathering-points with [gathering-type = "workplace"]
  [
    set amount-of-capital amount-of-capital + transfer-amount-from-shops-to-workplaces / n-of-workplaces
    set current-profit current-profit + transfer-amount-from-shops-to-workplaces / n-of-workplaces
    set stock-of-goods stock-of-goods - transfer-amount-from-shops-to-workplaces / unit-price-of-goods / n-of-workplaces
  ]
end

to perform-government-actions
  ;collect taxes
  let taxes-collected 0

  ask gathering-points with [gathering-type = "essential-shop"]
  [
    if current-profit > 0
    [
      let tax-amount current-profit * ratio-tax-on-essential-shops
      set taxes-collected taxes-collected + tax-amount
      set amount-of-capital amount-of-capital - tax-amount
      set current-profit current-profit - tax-amount
    ]
  ]

  ask gathering-points with [gathering-type = "non-essential-shop"]
  [
    if current-profit > 0
    [
      let tax-amount current-profit * ratio-tax-on-non-essential-shops
      set taxes-collected taxes-collected + tax-amount
      set amount-of-capital amount-of-capital - tax-amount
      set current-profit current-profit - tax-amount
    ]
  ]

  ask gathering-points with [gathering-type = "workplace"]
  [
    if current-profit > 0
    [
      let tax-amount current-profit * ratio-tax-on-workplaces
      set taxes-collected taxes-collected + tax-amount
      set amount-of-capital amount-of-capital - tax-amount
      set current-profit current-profit - tax-amount
    ]
  ]

  ask people with [age = "worker"]
  [
    if my-current-income > 0
    [
      let tax-amount my-current-income * ratio-tax-on-workers
      set taxes-collected taxes-collected + tax-amount
      set my-amount-of-capital my-amount-of-capital - tax-amount
      set my-current-income my-current-income - tax-amount
    ]
  ]

  ;redistribution
  let hospital-subsidy taxes-collected * ratio-hospital-subsidy
  let university-subsidy taxes-collected * ratio-university-subsidy
  let retirees-subsidy taxes-collected * ratio-retirees-subsidy
  let students-subsidy taxes-collected * ratio-students-subsidy
  let young-subsidy taxes-collected * ratio-young-subsidy

  let n-of-hospitals count gathering-points with [gathering-type = "hospital"]
  ask gathering-points with [gathering-type = "hospital"]
  [
    set amount-of-capital amount-of-capital + hospital-subsidy / n-of-hospitals
    set current-profit current-profit + hospital-subsidy / n-of-hospitals
  ]

  let n-of-universities count gathering-points with [gathering-type = "university"]
  ask gathering-points with [gathering-type = "university"]
  [
    set amount-of-capital amount-of-capital + university-subsidy / n-of-universities
    set current-profit current-profit + university-subsidy / n-of-universities
  ]

  let n-of-retirees count people with [age = "retired"]
  ask people with [age = "retired"]
  [
    set my-amount-of-capital my-amount-of-capital + retirees-subsidy / n-of-retirees
    set my-current-income my-current-income + retirees-subsidy / n-of-retirees
  ]

  let n-of-students count people with [age = "student"]
  ask people with [age = "student"]
  [
    set my-amount-of-capital my-amount-of-capital + students-subsidy / n-of-students
    set my-current-income my-current-income + students-subsidy / n-of-students
  ]

  let n-of-young count people with [age = "young"]
  ask people with [age = "young"]
  [
    set my-amount-of-capital my-amount-of-capital + young-subsidy / n-of-young
    set my-current-income my-current-income + young-subsidy / n-of-young
  ]
end
