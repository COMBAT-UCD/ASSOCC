breed [gathering-points gathering-point]
gathering-points-own [gathering-type
  available-food ; days of food that are available, this will be most useful for homes
]

;the head of the link are people and the tail are gathering points
directed-link-breed [gathering-links gathering-link]
gathering-links-own [commitment 
  features ;stores whatever is useful for decision-making, useful for including factors appealing to e.g. needs and values
]

to setup-activities
  if activity-model = "public&private leisure, rest, age-based work"
  [
    create-gathering-points #schools [set gathering-type "school" set shape "triangle" set xcor max-pxcor / 10 set ycor max-pycor * count gathering-points with [gathering-type = "school"] / (#schools + 1)]
    create-gathering-points #universities [set gathering-type "university" set shape "triangle 2" set xcor 2 * max-pxcor / 10 set ycor max-pycor * count gathering-points with [gathering-type = "university"] / (#universities + 1)]
    create-gathering-points #workplaces [set gathering-type "workplace" set shape "pentagon" set xcor 3 * max-pxcor / 10 set ycor max-pycor * count gathering-points with [gathering-type = "workplace"] / (#workplaces + 1)]
    create-gathering-points #essential-shops [set gathering-type "essential-shop" set shape "circle" set xcor 4 * max-pxcor / 10 set ycor max-pycor * count gathering-points with [gathering-type = "essential-shop"] / (#essential-shops + 1)]
    create-gathering-points #non-essential-shops [set gathering-type "non-essential-shop" set shape "circle 2" set xcor 5 * max-pxcor / 10 set ycor max-pycor * count gathering-points with [gathering-type = "non-essential-shop"] / (#non-essential-shops + 1)]
    create-gathering-points #hospital [set gathering-type "hospital" set shape "x" set heading 45 set color red set size 2 set xcor 6 * max-pxcor / 10 set ycor max-pycor * count gathering-points with [gathering-type = "hospital"] / (#hospital + 1)]
    create-gathering-points #public-leisure [set gathering-type "public-leisure" set shape "square 2" set xcor 7 * max-pxcor / 10 set ycor max-pycor * count gathering-points with [gathering-type = "public-leisure"] / (#public-leisure + 1)]
    create-gathering-points #private-leisure [set gathering-type "private-leisure" set shape "square" set xcor 8 * max-pxcor / 10 set ycor max-pycor * count gathering-points with [gathering-type = "private-leisure"] / (#private-leisure + 1)]
    create-gathering-points #homes [set gathering-type "home" set shape "house" set xcor 9 * max-pxcor / 10 set ycor max-pycor * count gathering-points with [gathering-type = "home"] / (#homes + 1) set available-food random 7 + 1]
    if animate? [
      let to-place gathering-points
      let placed turtle-set nobody
      while [any? to-place] [
        let focal one-of to-place
        let placing up-to-n-of 4 to-place with [gathering-type = [gathering-type] of focal]
        let p-pxcor random-pxcor
        let p-pycor random-pycor
        while [any? placed with [abs (p-pxcor - pxcor) <= 2  and abs (p-pycor - pycor) <= 2] or p-pxcor >= (max-pxcor - 1) or p-pxcor <= (min-pxcor + 1) or p-pycor >= (max-pycor - 1) or p-pycor <= (min-pycor + 1)] [
          set p-pxcor random-pxcor
          set p-pycor random-pycor
        ]
        show p-pxcor
        show p-pycor
        (foreach (up-to-n-of (count placing) (sort (([neighbors] of (patch p-pxcor p-pycor)) with [not member? self [neighbors4] of patch p-pxcor p-pycor]))) (sort placing) [ [ p g ] -> ask g [ move-to p ] ])
        set placed (turtle-set placed placing)
        set to-place to-place with [not member? self placed]
        show to-place
      ]
;      ask gathering-points [
;        let possible-xcor random-pxcor
;        let possible-ycor random-pycor
;        while [any? gathering-points-on patch possible-xcor possible-ycor] [
;          set possible-xcor random-pxcor
;          set possible-ycor random-pycor
;        ]
;        setxy possible-xcor possible-ycor
;      ]
    ]
  ]
end

to-report proximity-factor
  if gathering-type = "hospital" [report density-factor-hospital]
  if gathering-type = "school"[report density-factor-schools]
  if gathering-type = "university"[report density-factor-universities]
  if gathering-type = "workplace"[report density-factor-workplaces]
  if gathering-type = "public-leisure"[report density-factor-public-leisure]
  if gathering-type = "private-leisure"[report density-factor-private-leisure]
  if gathering-type = "home"[report density-factor-homes]
  if gathering-type = "essential-shop" [report density-factor-essential-shops]
  if gathering-type = "non-essential-shop" [report density-factor-non-essential-shops]
  error (word gathering-type " not defined")
end

; ToDo: Update this!
to-report is-practicable-at-home?
  if gathering-type = "school" or gathering-type = "university" or gathering-type = "workplace" or gathering-type = "home"
  [report true]
  if gathering-type = "public-leisure" or gathering-type = "private-leisure" or gathering-type = "essential-shop" or gathering-type = "non-essential-shop" or gathering-type = "hospital" 
  [report false]
end


;might be to be revised later as "to-be-expected-to-be-alone-at" based on whether people show(ed) up at the gathering point.
to-report is-alone-at? [gp]
  report any? other [in-gathering-link-neighbors] of gp
end 

;might be to be revised later, if the number of people expected to show up at the gathering point lowers
to-report expected-number-of-other-participants
 ; if is-practicable-at-home? and is-lockdown-enforced? [report 0]
  report count other in-gathering-link-neighbors
end

to-report is-accessible?
  if gathering-type = "workplace" and closed-workplaces? [report false]
  if gathering-type = "school" and closed-schools? [report false]  
  if gathering-type = "university" and closed-universities? [report false]  
  report true
end

to-report homes
  report gathering-points with [gathering-type = "home"]
end

to-report gatherers
  report in-gathering-link-neighbors
end

to-report houses-hosting-retired
  report homes with [any? gatherers with [age = "retired"]]
end