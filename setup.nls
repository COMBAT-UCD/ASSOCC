__includes ["scenarios.nls"]
to setup
  check-parameters
  load-preset-parameters
  clear-all
  set-default-shape people "circle"
  if debug? or static-seed?[  random-seed 47822 ]
  set slice-of-the-day "morning"
  set day-of-the-week "monday"
  set current-day 0
  set #dead-people 0

  setup-activities
  create-all-people

  setup-social-networks

  if with-infected? [infect-one-random-person]

  update-display

  ask links[hide-link]

  set is-lockdown-active? false
  reset-ticks
end


to check-parameters
  if probability-self-recovery-symptoms + probability-recorvery-if-treated + probability-unavoidable-death > 1
  [
    error "probability-self-recovery-symptoms + probability-recorvery-if-treated + probability-unavoidable-death > 1"
  ]

  if probability-self-recovery-symptoms-old + probability-recorvery-if-treated-old + probability-unavoidable-death-old > 1
  [
    error "probability-self-recovery-symptoms-old + probability-recorvery-if-treated-old + probability-unavoidable-death-old > 1"
  ]
end


to setup-people-homes
  if household-composition = "balanced-mix" or household-composition = "segregated-elderly"
  [
    ask people [setup-person-home]
  ]
  if household-composition = "different-kinds"
  [
    ask n-of #min-retirees-in-retired-couple-homes homeless-people with [age = "retired"]
    [
      setup-person-home
    ]

    ask n-of #min-retirees-in-multi-generational-homes homeless-people with [age = "retired"]
    [
      setup-person-home
    ]

    ask n-of #min-workers-in-adults-homes homeless-people with [age = "worker"]
    [
      setup-person-home
    ]

    ask n-of #min-workers-in-multi-generational-homes homeless-people with [age = "worker"]
    [
      setup-person-home
    ]

    ask n-of #min-workers-in-family-homes homeless-people with [age = "worker"]
    [
      setup-person-home
    ]

    ask n-of #min-students-in-adults-homes homeless-people with [age = "student"]
    [
      setup-person-home
    ]

    ask n-of #min-students-in-multi-generational-homes homeless-people with [age = "student"]
    [
      setup-person-home
    ]

    ask n-of #min-students-in-family-homes homeless-people with [age = "student"]
    [
      setup-person-home
    ]

    ask n-of #min-young-in-family-homes homeless-people with [age = "young"]
    [
      setup-person-home
    ]

    ask n-of #min-young-in-multi-generational-homes homeless-people with [age = "young"]
    [
      setup-person-home
    ]

    ask homeless-people
    [
      setup-person-home
    ]
  ]
end

;;it may that at some point we turn homes as a special breed of turtle that (bidirectionally) relates to a gathering point
to setup-person-home

  let h nobody
  if household-composition = "balanced-mix"
  [
    set h min-one-of homes [count gatherers with [age = [age] of [myself] of myself]]
  ]
  if household-composition = "segregated-elderly"
  [
    let quota-of-homes-of-retired floor (#homes * #retired / #people )
    let quota-of-homes-for-non-retired floor (#homes - quota-of-homes-of-retired)

    ifelse is-retired?
    [
      ifelse count houses-hosting-retired < quota-of-homes-of-retired
      [
        set h one-of homes with [not any? gatherers]
      ]
      [
        set h one-of houses-only-hosting-retired with-min [count gatherers]
      ]
    ]
    [
      let filled-houses-for-non-retired homes with [any? gatherers and not any? gatherers with [is-retired?]]
      ifelse count filled-houses-for-non-retired < quota-of-homes-for-non-retired
      [set h one-of homes with [not any? gatherers]]
      [set h one-of filled-houses-for-non-retired with-min [count gatherers]]
    ]
  ]
  if household-composition = "different-kinds"
  [
    if age = "retired"
    [
      ifelse #min-retirees-in-retired-couple-homes > 0
      [
        ifelse any? homes with [count gatherers = 1 and any? gatherers with [age = "retired"]]
        [
          set h one-of homes with [count gatherers = 1 and any? gatherers with [age = "retired"]]
        ]
        [
          set h one-of empty-houses
        ]

        set #min-retirees-in-retired-couple-homes #min-retirees-in-retired-couple-homes - 1
      ]
      [
        ifelse #min-retirees-in-multi-generational-homes > 0
        [
          set h one-of empty-houses

          set #min-retirees-in-multi-generational-homes #min-retirees-in-multi-generational-homes - 1
        ]
        [
          ;extra retirees
          set h one-of houses-hosting-multiple-generations
        ]
      ]
    ]

    if age = "worker"
    [
      ifelse #min-workers-in-adults-homes > 0
      [
        ifelse any? homes with [count gatherers = 1 and any? gatherers with [age = "worker"]]
        [
          set h one-of homes with [count gatherers = 1 and any? gatherers with [age = "worker"]]
        ]
        [
          set h one-of empty-houses
        ]

        set #min-workers-in-adults-homes #min-workers-in-adults-homes - 1
      ]
      [
        ifelse #min-workers-in-multi-generational-homes > 0
        [
          set h one-of homes with [count gatherers = 1 and any? gatherers with [age = "retired"]]

          set #min-workers-in-multi-generational-homes #min-workers-in-multi-generational-homes - 1
        ]
        [
          ifelse #min-workers-in-family-homes > 0
          [
            set h one-of empty-houses

            set #min-workers-in-family-homes #min-workers-in-family-homes - 1
          ]
          [
            ;extra workers
            set h one-of homes with [any? gatherers with [age = "worker"]]
          ]
        ]
      ]
    ]

    if age = "student"
    [
      ifelse #min-students-in-adults-homes > 0
      [
        ifelse any? homes with [count gatherers = 1 and any? gatherers with [age = "student"]]
        [
          set h one-of homes with [count gatherers = 1 and any? gatherers with [age = "student"]]
        ]
        [
          set h one-of empty-houses
        ]

        set #min-students-in-adults-homes #min-students-in-adults-homes - 1
      ]
      [
        ifelse #min-students-in-multi-generational-homes > 0
        [
          set h one-of homes with [count gatherers = 2 and any? gatherers with [age = "worker"] and any? gatherers with [age = "retired"]]

          set #min-students-in-multi-generational-homes #min-students-in-multi-generational-homes - 1
        ]
        [
          ifelse #min-students-in-family-homes > 0
          [
            set h one-of homes with [count gatherers = 1 and any? gatherers with [age = "worker"]]

            set #min-students-in-family-homes #min-students-in-family-homes - 1
          ]
          [
            ;extra students
            set h one-of homes with [any? gatherers with [age = "student"] or any? gatherers with [age = "young"]]
          ]
        ]
      ]
    ]

    if age = "young"
    [
      ifelse #min-young-in-family-homes > 0
      [
        set h one-of homes with [count gatherers = 1 and any? gatherers with [age = "worker"]]

        set #min-young-in-family-homes #min-young-in-family-homes - 1
      ]
      [
        ifelse #min-young-in-multi-generational-homes > 0
        [
          set h one-of homes with [count gatherers = 2 and any? gatherers with [age = "worker"] and any? gatherers with [age = "retired"]]

          set #min-young-in-multi-generational-homes #min-young-in-multi-generational-homes - 1
        ]
        [
          ;extra young
          set h one-of homes with [any? gatherers with [age = "worker"] and any? gatherers with [age != "worker"]]
        ]
      ]
    ]
  ]

  if h = nobody [error (word "unimplemented for: " age " " self)]

  create-gathering-link-to h
  [
    set commitment 1
    set features (list "rest" "visit family")
  ]
end

to create-all-people
  if original-distribution = "set-by-household-quotas"
  [
    if not (household-composition = "different-kinds") [error "wrong initialization of household composition"]

    let #adults-homes floor (#homes * ratio-adults-homes)
    let #retired-couple-homes floor (#homes * ratio-retired-couple-homes)
    let #family-homes floor (#homes * ratio-family-homes)
    let #multi-generational-homes #homes - (#adults-homes + #retired-couple-homes + #family-homes)

    let #min-people #adults-homes * 2 + #retired-couple-homes * 2 + #family-homes * 2 + #multi-generational-homes * 3

    ;initializing local variables
    let #extra-retirees 0
    let #extra-young 0
    let #extra-students 0
    let #extra-workers 0

    ifelse #min-people <= #total-population
    [
      set #min-workers-in-adults-homes (floor (#adults-homes / 2)) * 2 ;to ensure that adults-homes have either 2 workers or 2 students (not both)
      set #min-students-in-adults-homes #adults-homes * 2 - #min-workers-in-adults-homes
      set #min-retirees-in-retired-couple-homes #retired-couple-homes * 2
      set #min-workers-in-family-homes #family-homes
      set #min-students-in-family-homes floor (#family-homes / 2)
      set #min-young-in-family-homes #family-homes - #min-students-in-family-homes
      set #min-workers-in-multi-generational-homes #multi-generational-homes
      set #min-students-in-multi-generational-homes floor (#multi-generational-homes / 2)
      set #min-young-in-multi-generational-homes #multi-generational-homes - #min-students-in-multi-generational-homes
      set #min-retirees-in-multi-generational-homes #multi-generational-homes

      let #extra-people #total-population - #min-people

      if #extra-people > 0
      [
        ;#extra-retirees
        if #multi-generational-homes > 0
        [
          set #extra-retirees floor (#extra-people * 1 / 10)
        ]

        ;#extra-young
        if #family-homes + #multi-generational-homes > 0
        [
          set #extra-young floor (#extra-people * 3 / 10)
        ]

        ;#extra-students and #extra-workers
        ifelse #adults-homes + #family-homes + #multi-generational-homes > 0
        [
          set #extra-students floor (#extra-people * 2 / 10)
          set #extra-workers #extra-people - (#extra-retirees + #extra-young + #extra-students)
        ]
        [
          error "Once there are only homes for retired couples, total population should be exactly twice the number of homes"
        ]
      ]
    ]
    [
      error word "#total-population should be at least " #min-people
    ]

    set #young #min-young-in-family-homes + #min-young-in-multi-generational-homes + #extra-young
    set #students #min-students-in-adults-homes + #min-students-in-family-homes + #min-students-in-multi-generational-homes + #extra-students
    set #workers #min-workers-in-adults-homes + #min-workers-in-family-homes + #min-workers-in-multi-generational-homes + #extra-workers
    set #retired #min-retirees-in-retired-couple-homes + #min-retirees-in-multi-generational-homes + #extra-retirees
  ]

  if original-distribution = "one-person-per-patch"
  [ask patches [sprout-people 1 [setup-person]]]
  ;if original-distribution = "set-by-people-quotas"
  ;[
    create-people #young + #students + #workers + #retired [setup-person]
  ;]
  setup-people-homes


  ask people [ set current-activity one-of link-neighbors with  [gathering-type = "home"]]
end